{"version":3,"sources":["services/api/Api.ts","services/api/NumerosService.ts","services/api/ResultadosService.ts","components/UltimosJogos.tsx","components/Message.tsx","scenes/Home.tsx","scenes/Resultados.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Api","uri","sucesso","erro","a","fetch","response","json","NumerosService","dezenas","jogos","ResultadosService","UltimosJogos","props","loading","jogo","data","useState","showLoading","setShowLoading","useEffect","Card","Header","Body","Spinner","animation","Text","join","Message","show","message","type","showAlert","setShowAlert","Alert","variant","onClose","dismissible","defaultProps","Home","setJogos","setDezenas","resultados","setResultados","setErro","setLoading","ultimos","setUltimos","numerosService","resultadosService","getUltimo","r","tratarUltimos","e","tratarErro","err","Container","Form","Group","controlId","Label","Control","placeholder","max","min","defaultValue","onChange","Number","target","value","required","Button","block","onClick","preventDefault","listar","Table","striped","bordered","hover","size","map","item","key","numeros","Resultados","text","setMessage","service","lista","tratarSucesso","console","log","ganhadores","Menu","expanded","setExpanded","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","App","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a5635435.chunk.js","sourcesContent":["export abstract class Api {\n  async execute(uri: string, sucesso: Function, erro: Function) {\n    try {\n      let response = await fetch(uri);\n      let json = await response.json();\n      sucesso(json);\n    } catch (err) {\n      erro(err);\n    }\n  }\n}\n","import { Api } from \"./Api\";\n\nexport class NumerosService extends Api {\n  listar(dezenas: number, jogos: number, sucesso: Function, erro: Function) {\n    return super.execute(`/numeros/${dezenas}/jogos/${jogos}`, sucesso, erro);\n  }\n}\n","import { Api } from \"./Api\";\n\nexport class ResultadosService extends Api {\n  listar(sucesso: Function, erro: Function) {\n    return super.execute(\"/resultados\", sucesso, erro);\n  }\n\n  getUltimo(sucesso: Function, erro: Function) {\n    return super.execute(\"/resultados/ultimo\", sucesso, erro);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport { Card, Spinner} from \"react-bootstrap\";\n\n\ninterface Props {\n    loading: boolean;\n    jogo: number;\n    data: string;\n    dezenas: Array<number>;\n}\n\nconst UltimosJogos: React.FC<Props> = (props: Props) => {\n\n    const { loading, jogo, data, dezenas } = props;\n\n    const [showLoading, setShowLoading] = useState(true);\n\n    useEffect(()=>{\n        setShowLoading(loading);\n    }, [loading]);\n\n    return (\n        <Card>\n            <Card.Header>Resultado do concurso {jogo} de {data}:</Card.Header>\n            <Card.Body>\n            {showLoading ? (\n                <Spinner animation=\"border\" />\n            ) : jogo ? (\n                <>\n                <Card.Text>{dezenas.join(\", \")}</Card.Text>\n                </>\n            ) : null}\n            </Card.Body>\n      </Card>\n    )\n}\n\nexport default UltimosJogos;","import React, { SFC, useState, useEffect } from \"react\";\n\nimport { Alert } from \"react-bootstrap\";\n\n\ninterface Props {\n    show: boolean;\n    message?: string | null;\n    type?: | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'danger'\n    | 'warning'\n    | 'info'\n    | 'dark'\n    | 'light';\n}\n\nconst Message: SFC<Props> = (props: Props) => {\n\n    const { show, message, type } = props;\n\n    const [showAlert, setShowAlert] = useState(true);\n\n    useEffect(()=>{\n        setShowAlert(show);\n    }, [show]);\n\n    return showAlert ? (\n      <Alert variant={type} onClose={() => setShowAlert(false)} dismissible>\n        {message}\n      </Alert>\n    ) : null;\n    \n};\n\nMessage.defaultProps = {\n  message: \"\",\n  type: \"danger\"\n}\n\n// 'primary',   'secondary',  'success',  'danger',  'warning',  'info',  'light',  'dark',\n\nexport default Message;","import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Container, Table } from \"react-bootstrap\";\n\nimport { NumerosService, ResultadosService } from \"../services/api\";\nimport UltimosJogos from '../components/UltimosJogos';\nimport Message from '../components/Message';\n\nconst Home = () => {\n  const [jogos, setJogos] = useState(1);\n  const [dezenas, setDezenas] = useState(1);\n  const [resultados, setResultados] = useState([]);\n  const [erro, setErro] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [ultimos, setUltimos] = useState({\n    jogo: 0,\n    data: \"\",\n    dezenas: []\n  });\n\n  const numerosService = new NumerosService();\n  const resultadosService = new ResultadosService();\n\n  useEffect(() => {\n    resultadosService.getUltimo((r: any) => tratarUltimos(r), (e: any) => tratarErro(e));\n  }, []);\n\n  const tratarUltimos = (r: any) => {\n    setUltimos(r);\n    setLoading(false);\n  };\n\n  const tratarErro = (err: any) => {\n    setErro(`Não foi possível obter o ultimo resultado: ${err}`);\n    setLoading(false);\n  };\n\n  const consultar = (e: React.FormEvent) => {\n    e.preventDefault();\n    setErro(\"\");\n    numerosService.listar(\n      dezenas, jogos, \n      (r: any) => setResultados(r),\n      (err: any) => setErro(`Não foi possível gerar as dezenas: ${err}`));\n  };\n\n  return (\n    <Container>\n      <br></br>\n      <Message show={erro !== \"\"} message={erro} />\n\n      <br></br>\n\n      <UltimosJogos loading={loading} jogo={ultimos.jogo} data={ultimos.data} dezenas={ultimos.dezenas} />\n\n      <br></br>\n     \n      <Form>\n        <Form.Group controlId=\"dezenas\">\n          <Form.Label>Quantidade de dezenas</Form.Label>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"\"\n            max=\"13\"\n            min=\"6\"\n            defaultValue=\"6\"\n            onChange={(e: React.FormEvent) =>\n              setDezenas(Number((e.target as HTMLInputElement).value))\n            }\n            required\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"jogos\">\n          <Form.Label>Número de jogos</Form.Label>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"\"\n            max=\"100\"\n            min=\"1\"\n            defaultValue=\"1\"\n            onChange={(e: React.FormEvent) =>\n              setJogos(Number((e.target as HTMLInputElement).value))\n            }\n            required\n          />\n        </Form.Group>\n        {/* btn-rounded btn-block my-4 waves-effect z-depth-0 \n        \n        btn btn-primary btn-outline-info btn-rounded btn-block my-4 waves-effect z-depth-0\"\n        */}\n        <Button variant=\"dark\" type=\"submit\" block onClick={consultar}>\n          Gerar Dezenas\n        </Button>\n      </Form>\n\n      <br></br>\n\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Jogos</th>\n            <th>Dezenas</th>\n          </tr>\n        </thead>\n        <tbody>\n          {resultados.map((item: any) => (\n            <tr key={item.jogo}>\n              <td>{item.jogo}</td>\n              <td>{item.numeros.join(\", \")}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Table, Spinner, Button } from \"react-bootstrap\";\nimport { ResultadosService } from \"../services/api/ResultadosService\";\nimport Message from \"../components/Message\";\n\nconst Resultados = () => {\n  const [resultados, setResultados] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState({text: \"\", type: \"\"});\n  const service = new ResultadosService();\n\n  useEffect(() => {\n    setLoading(true);\n    service.listar((lista: []) => tratarSucesso(lista), (err: any) => tratarErro(err) );\n  }, []);\n\n\n  const tratarSucesso = (lista: []) => {\n    setLoading(false);\n    setResultados(lista);\n  };\n\n  const tratarErro = (err: any) => {\n    setLoading(false);\n    setMessage({text: `Falha ao listar resultados: ${err}`, type: 'danger' })\n  };\n\n  const atualizar = () => {\n    console.log('em construcao');\n    setMessage({text: `em construcao`, type: 'info' })\n  }\n\n  if(loading) {\n    return ( \n    <>\n      <br></br>\n      <Spinner animation=\"border\"/>\n    </>\n    );\n  }\n\n  return (\n    <Container>\n      <br></br>\n      <Message show={message.text !== \"\"} message={message.text} type=\"danger\" />\n\n      <Button variant=\"dark\" type=\"submit\" block onClick={atualizar}>\n          Atualizar\n      </Button>\n\n      <br></br>\n\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Jogo</th>\n            <th>Data</th>\n            <th>Dezenas</th>\n            <th>Ganhadores</th>\n          </tr>\n        </thead>\n        <tbody>\n          {resultados?.map((item: any) => (\n            <tr>\n              <td>{item.jogo}</td>\n              <td>{item.data}</td>\n              <td>{item.dezenas.join(\", \")}</td>\n              <td>{item.ganhadores}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </Container>\n  );\n};\n\nexport default Resultados;","import React, { useState } from \"react\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst Menu = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" expanded={expanded}>\n        <Navbar.Brand as={Link} to=\"/\" onClick={() => setExpanded(false)}>\n          Bolão\n        </Navbar.Brand>\n        <Navbar.Toggle\n          aria-controls=\"basic-navbar-nav\"\n          onClick={() => setExpanded(!expanded)}\n        />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\" onClick={() => setExpanded(false)}>\n              Início\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/res\"\n              onClick={() => setExpanded(false)}\n            >\n              Resultados\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./scenes/Home\";\nimport Resultados from \"./scenes/Resultados\";\n\nimport Menu from \"./components/Menu\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/res\" component={Resultados} />\n        <Route render={() => <p>Não encontrado</p>} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MemoryRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <MemoryRouter>\n    <App />\n  </MemoryRouter>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}