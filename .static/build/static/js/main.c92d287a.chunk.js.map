{"version":3,"sources":["components/Home.tsx","components/Resultados.tsx","components/Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","useState","jogos","setJogos","dezenas","setDezenas","resultados","setResultados","jogo","data","ultimos","setUltimos","loading","setLoading","useEffect","executarServicoUltimos","a","console","log","fetch","response","json","ultimosNumeros","executarServico","uri","lista","Container","Form","Group","controlId","Label","Control","type","placeholder","max","min","defaultValue","onChange","e","Number","target","value","required","Button","variant","block","onClick","preventDefault","Table","striped","bordered","hover","size","map","item","numeros","join","Card","Header","Body","Spinner","animation","Title","Text","Resultados","Menu","expanded","setExpanded","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","className","exact","path","component","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c92d287a.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport { Form, Button, Container, Table, Card, Spinner } from \"react-bootstrap\";\n\nconst Home = () => {\n\n  const [jogos, setJogos] = useState(1);\n  const [dezenas, setDezenas] = useState(1);\n  const [resultados, setResultados] = useState([]);\n  const [ultimos, setUltimos] = useState({jogo: null, data: null, dezenas: []});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(()=>{\n    executarServicoUltimos();\n  }, [])\n\n  const consultar = (e: React.FormEvent) => {\n    e.preventDefault();\n    executarServico();\n  }\n\n  const executarServicoUltimos = async () => {\n    try{\n      setLoading(true);\n      console.log(`consulta ultimos resultados`);\n      let uri = `/resultados/ultimo`;\n      let response = await fetch(uri);\n      let ultimosNumeros = await response.json();\n      setUltimos(ultimosNumeros);\n    } catch (err) {\n        console.log(`Falha ao obter resultado: ${err}`);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const executarServico = async () => {\n    try{\n      let uri = `/numeros/${dezenas}/jogos/${jogos}`;\n      let response = await fetch(uri);\n      let lista = await response.json();\n      setResultados(lista);\n    } catch (err) {\n        console.log(`Falha ao gerar numeros: ${err}`);\n    }\n  }\n  \n  return (\n    <Container>\n      <Form>\n        <Form.Group controlId=\"dezenas\">\n          <Form.Label>Dezenas</Form.Label>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"\"\n            max=\"13\"\n            min=\"1\"\n            defaultValue=\"1\"\n            onChange={(e: React.FormEvent) => setDezenas(Number((e.target as HTMLInputElement).value))}\n            required\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"jogos\">\n          <Form.Label>Jogos</Form.Label>\n          <Form.Control\n            type=\"number\"\n            placeholder=\"\"\n            max=\"100\"\n            min=\"1\"\n            defaultValue=\"1\"\n            onChange={(e: React.FormEvent) => setJogos(Number((e.target as HTMLInputElement).value))}\n            required\n          />\n        </Form.Group>\n        {/* btn-rounded btn-block my-4 waves-effect z-depth-0 \n        \n        btn btn-primary btn-outline-info btn-rounded btn-block my-4 waves-effect z-depth-0\"\n        */}\n        <Button variant=\"dark\" type=\"submit\" block onClick={consultar}>\n          Gerar Dezenas\n        </Button>\n      </Form>\n\n      <br></br>\n\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>Jogo</th>\n            <th>Dezenas</th>\n          </tr>\n        </thead>\n        <tbody>\n          { resultados.map((item: any) => (\n            <tr>\n              <td>{item.jogo}</td>\n              <td>{item.numeros.join(', ')}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n\n      <br></br>\n      <Card>\n        <Card.Header>Último Resultado</Card.Header>\n        <Card.Body>\n          { loading ? \n            <Spinner animation=\"border\" /> : \n            ultimos.jogo ?\n          ( \n            <>\n              <Card.Title>Concurso {ultimos.jogo} de {ultimos.data}</Card.Title>\n             <Card.Text>{ultimos.dezenas.join(', ')}</Card.Text>\n           </>\n          ): null }\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst Resultados = () => {\n  return <p>Resultados</p>;\n};\n\nexport default Resultados;\n","import React, { useState } from \"react\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Resultados from \"./Resultados\";\n\nconst Menu = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" expanded={expanded}>\n        <Navbar.Brand as={Link} to=\"/\" onClick={() => setExpanded(false)}>\n          Bolão\n        </Navbar.Brand>\n        <Navbar.Toggle\n          aria-controls=\"basic-navbar-nav\"\n          onClick={() => setExpanded(!expanded)}\n        />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/\" onClick={() => setExpanded(false)}>\n              Início\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/resultados\"\n              onClick={() => setExpanded(false)}\n            >\n              Resultados\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/resultados\" component={Resultados} />\n        <Route render={() => <p>Não encontrado</p>} />\n      </Switch>\n    </>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Menu from \"./components/Menu\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}